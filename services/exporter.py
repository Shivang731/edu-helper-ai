import os
import json
from datetime import datetime
from typing import List, Dict

class ExporterService:
    def __init__(self, export_dir: str = "data/exports"):
        self.export_dir = export_dir
        self._ensure_export_dir()
    
    def _ensure_export_dir(self):
        """Ensure export directory exists."""
        if not os.path.exists(self.export_dir):
            os.makedirs(self.export_dir, exist_ok=True)
    
    def export_summary_md(self, filename: str, summary: str) -> str:
        """Export summary as Markdown file."""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            export_filename = f"summary_{filename}_{timestamp}.md"
            export_path = os.path.join(self.export_dir, export_filename)
            
            markdown_content = f"""# Summary: {filename}

**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Summary

{summary}

---

*Generated by Edu Helper - Smart Study-Aid Generator*
"""
            
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            return export_filename
            
        except Exception as e:
            print(f"Error exporting summary to Markdown: {str(e)}")
            return None
    
    def export_flashcards_md(self, filename: str, flashcards: List[Dict]) -> str:
        """Export flashcards as Markdown file."""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            export_filename = f"flashcards_{filename}_{timestamp}.md"
            export_path = os.path.join(self.export_dir, export_filename)
            
            markdown_content = f"""# Flashcards: {filename}

**Generated on:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Flashcards

"""
            
            for i, card in enumerate(flashcards, 1):
                markdown_content += f"""### Card {i}

**Front:** {card['front']}

**Back:** {card['back']}

---

"""
            
            markdown_content += "*Generated by Edu Helper - Smart Study-Aid Generator*"
            
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            
            return export_filename
            
        except Exception as e:
            print(f"Error exporting flashcards to Markdown: {str(e)}")
            return None
    
    def export_flashcards_json(self, filename: str, flashcards: List[Dict]) -> str:
        """Export flashcards as JSON file."""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            export_filename = f"flashcards_{filename}_{timestamp}.json"
            export_path = os.path.join(self.export_dir, export_filename)
            
            export_data = {
                "source_file": filename,
                "generated_on": datetime.now().isoformat(),
                "flashcards": flashcards,
                "total_cards": len(flashcards)
            }
            
            with open(export_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            
            return export_filename
            
        except Exception as e:
            print(f"Error exporting flashcards to JSON: {str(e)}")
            return None
    
    def export_anki_format(self, filename: str, flashcards: List[Dict]) -> str:
        """Export flashcards in Anki-compatible format."""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            export_filename = f"anki_{filename}_{timestamp}.txt"
            export_path = os.path.join(self.export_dir, export_filename)
            
            # Anki format: Front<TAB>Back
            anki_content = ""
            for card in flashcards:
                front = card['front'].replace('\n', ' ').replace('\t', ' ')
                back = card['back'].replace('\n', ' ').replace('\t', ' ')
                anki_content += f"{front}\t{back}\n"
            
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(anki_content)
            
            return export_filename
            
        except Exception as e:
            print(f"Error exporting to Anki format: {str(e)}")
            return None
