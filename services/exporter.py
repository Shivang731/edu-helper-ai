import os
from datetime import datetime
from typing import List, Dict, Optional
import json

class ExporterService:
    """Service for exporting summaries and flashcards to various formats."""
    
    def __init__(self, export_dir: str = "exports"):
        self.export_dir = export_dir
        os.makedirs(export_dir, exist_ok=True)
    
    def export_summary_md(self, filename: str, summary: str) -> str:
        """Export summary to Markdown format."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"summary_{filename.split('.')[0]}_{timestamp}.md"
        export_path = os.path.join(self.export_dir, export_filename)
        
        markdown_content = f"""# Summary: {filename}

**Generated on:** {datetime.now().strftime("%B %d, %Y at %I:%M %p")}

---

## Summary

{summary}

---

*Generated by Smart Study-Aid Generator*
"""
        
        try:
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            return export_filename
        except Exception as e:
            print(f"Error exporting summary: {e}")
            return ""
    
    def export_flashcards_md(self, filename: str, flashcards: List[Dict[str, str]]) -> str:
        """Export flashcards to Markdown format."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"flashcards_{filename.split('.')[0]}_{timestamp}.md"
        export_path = os.path.join(self.export_dir, export_filename)
        
        markdown_content = f"""# Flashcards: {filename}

**Generated on:** {datetime.now().strftime("%B %d, %Y at %I:%M %p")}
**Total Cards:** {len(flashcards)}

---

"""
        
        for i, card in enumerate(flashcards, 1):
            card_type = card.get('type', 'unknown').replace('_', ' ').title()
            markdown_content += f"""## Card {i} ({card_type})

**Question:** {card.get('question', 'N/A')}

**Answer:** {card.get('answer', 'N/A')}

---

"""
        
        markdown_content += "*Generated by Smart Study-Aid Generator*"
        
        try:
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            return export_filename
        except Exception as e:
            print(f"Error exporting flashcards: {e}")
            return ""
    
    def export_summary_txt(self, filename: str, summary: str) -> str:
        """Export summary to plain text format."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"summary_{filename.split('.')[0]}_{timestamp}.txt"
        export_path = os.path.join(self.export_dir, export_filename)
        
        text_content = f"""SUMMARY: {filename}
Generated on: {datetime.now().strftime("%B %d, %Y at %I:%M %p")}

{'='*50}

{summary}

{'='*50}
Generated by Smart Study-Aid Generator
"""
        
        try:
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(text_content)
            return export_filename
        except Exception as e:
            print(f"Error exporting summary as text: {e}")
            return ""
    
    def export_flashcards_json(self, filename: str, flashcards: List[Dict[str, str]]) -> str:
        """Export flashcards to JSON format."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"flashcards_{filename.split('.')[0]}_{timestamp}.json"
        export_path = os.path.join(self.export_dir, export_filename)
        
        export_data = {
            "metadata": {
                "source_file": filename,
                "generated_on": datetime.now().isoformat(),
                "total_cards": len(flashcards),
                "generator": "Smart Study-Aid Generator"
            },
            "flashcards": flashcards
        }
        
        try:
            with open(export_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
            return export_filename
        except Exception as e:
            print(f"Error exporting flashcards as JSON: {e}")
            return ""
    
    def export_study_package(self, filename: str, summary: str, flashcards: List[Dict[str, str]], 
                           key_points: Optional[List[str]] = None) -> str:
        """Export a complete study package with summary, flashcards, and key points."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"study_package_{filename.split('.')[0]}_{timestamp}.md"
        export_path = os.path.join(self.export_dir, export_filename)
        
        markdown_content = f"""# Complete Study Package: {filename}

**Generated on:** {datetime.now().strftime("%B %d, %Y at %I:%M %p")}

---

## 📝 Summary

{summary}

---

"""
        
        # Add key points if provided
        if key_points:
            markdown_content += """## 🔑 Key Points

"""
            for i, point in enumerate(key_points, 1):
                markdown_content += f"{i}. {point}\n"
            
            markdown_content += "\n---\n\n"
        
        # Add flashcards
        markdown_content += f"""## 🃏 Flashcards ({len(flashcards)} cards)

"""
        
        for i, card in enumerate(flashcards, 1):
            card_type = card.get('type', 'unknown').replace('_', ' ').title()
            markdown_content += f"""### Card {i} - {card_type}

**Q:** {card.get('question', 'N/A')}

**A:** {card.get('answer', 'N/A')}

"""
        
        markdown_content += """---

## 📚 Study Tips

1. **Review the summary** first to get an overview of the material
2. **Go through key points** to identify the most important concepts
3. **Practice with flashcards** regularly for better retention
4. **Test yourself** by covering the answers and trying to recall them
5. **Space out your review sessions** for optimal learning

---

*Generated by Smart Study-Aid Generator*
"""
        
        try:
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            return export_filename
        except Exception as e:
            print(f"Error exporting study package: {e}")
            return ""
    
    def export_anki_cards(self, filename: str, flashcards: List[Dict[str, str]]) -> str:
        """Export flashcards in Anki-compatible CSV format."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_filename = f"anki_cards_{filename.split('.')[0]}_{timestamp}.csv"
        export_path = os.path.join(self.export_dir, export_filename)
        
        try:
            with open(export_path, 'w', encoding='utf-8') as f:
                # Write header
                f.write("Front,Back,Tags\n")
                
                # Write flashcards
                for card in flashcards:
                    question = card.get('question', '').replace('"', '""')  # Escape quotes
                    answer = card.get('answer', '').replace('"', '""')
                    card_type = card.get('type', 'study-aid')
                    
                    f.write(f'"{question}","{answer}","{card_type}"\n')
            
            return export_filename
        except Exception as e:
            print(f"Error exporting Anki cards: {e}")
            return ""
    
    def get_export_formats(self) -> Dict[str, str]:
        """Get available export formats."""
        return {
            'markdown': 'Markdown (.md)',
            'text': 'Plain Text (.txt)',
            'json': 'JSON (.json)',
            'anki': 'Anki Cards (.csv)',
            'complete': 'Complete Study Package (.md)'
        }
    
    def list_exports(self) -> List[Dict[str, str]]:
        """List all exported files."""
        try:
            exports = []
            for filename in os.listdir(self.export_dir):
                if filename.endswith(('.md', '.txt', '.json', '.csv')):
                    file_path = os.path.join(self.export_dir, filename)
                    stat = os.stat(file_path)
                    
                    exports.append({
                        'filename': filename,
                        'size': stat.st_size,
                        'created': datetime.fromtimestamp(stat.st_ctime).strftime("%Y-%m-%d %H:%M:%S"),
                        'modified': datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S")
                    })
            
            # Sort by creation time (newest first)
            exports.sort(key=lambda x: x['created'], reverse=True)
            return exports
            
        except Exception as e:
            print(f"Error listing exports: {e}")
            return []
    
    def cleanup_old_exports(self, days: int = 30) -> int:
        """Clean up export files older than specified days."""
        try:
            count = 0
            cutoff_time = datetime.now().timestamp() - (days * 24 * 60 * 60)
            
            for filename in os.listdir(self.export_dir):
                file_path = os.path.join(self.export_dir, filename)
                if os.path.isfile(file_path) and os.path.getctime(file_path) < cutoff_time:
                    os.remove(file_path)
                    count += 1
            
            return count
            
        except Exception as e:
            print(f"Error cleaning up exports: {e}")
            return 0
